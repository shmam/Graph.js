"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require("assert");
var path = require("path");
var napa = require("../lib/index");
function shouldFail(func) {
    return func().then(function (value) {
        assert(false, "Failure was expected.");
    }, function (reason) {
        // Swallow the rejection since we expect failure
    });
}
describe('napajs/zone', function () {
    var _this = this;
    var napaZone1 = napa.zone.create('napa-zone1');
    var napaZone2 = napa.zone.create('napa-zone2');
    var napaLibPath = path.resolve(__dirname, '../lib');
    describe('create', function () {
        it('@node: default settings', function () {
            assert(napaZone1 != null);
            assert.strictEqual(napaZone1.id, 'napa-zone1');
        });
        // This case may be slow as the first hit of napa zone execute API, so we clear timeout.
        it('@napa: default settings', function () { return __awaiter(_this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, napaZone1.execute(napaLibPath + "/zone", 'create', ['new-zone'])];
                    case 1:
                        result = _a.sent();
                        assert.equal(result.value.id, "new-zone");
                        return [2 /*return*/];
                }
            });
        }); }).timeout(0);
        it('@node: zone id already exists', function () {
            assert.throws(function () { napa.zone.create('napa-zone1'); });
        });
        it('@napa: zone id already exists', function () {
            return shouldFail(function () {
                return napaZone1.execute(napaLibPath + "/zone", 'create', ['napa-zone1']);
            });
        });
    });
    describe("get", function () {
        it('@node: get node zone', function () {
            var zone = napa.zone.get('node');
            assert(zone != null);
            assert.strictEqual(zone.id, 'node');
        });
        it('@node: get napa zone', function () {
            var zone = napa.zone.get('napa-zone1');
            assert(zone != null);
            assert.strictEqual(zone.id, 'napa-zone1');
        });
        it('@napa: get napa zone', function () { return __awaiter(_this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, napaZone1.execute(napaLibPath + "/zone", "get", ['napa-zone1'])];
                    case 1:
                        result = _a.sent();
                        assert.strictEqual(result.value.id, 'napa-zone1');
                        return [2 /*return*/];
                }
            });
        }); });
        it('@napa: get node zone', function () { return __awaiter(_this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, napaZone1.execute(napaLibPath + "/zone", "get", ['node'])];
                    case 1:
                        result = _a.sent();
                        assert.strictEqual(result.value.id, 'node');
                        return [2 /*return*/];
                }
            });
        }); });
        it('@node: get napa created zone', function () {
            var zone = napa.zone.get('napa-zone2');
            assert(zone != null);
            assert.strictEqual(zone.id, 'napa-zone2');
        });
        it('@napa: get napa created zone', function () { return __awaiter(_this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, napaZone1.execute(napaLibPath + "/zone", 'get', ['napa-zone2'])];
                    case 1:
                        result = _a.sent();
                        assert.strictEqual(result.value.id, 'napa-zone2');
                        return [2 /*return*/];
                }
            });
        }); });
        it('@node: id not existed', function () {
            assert.throws(function () { napa.zone.get('zonex'); });
        });
        it('@napa: zone not existed', function () {
            return shouldFail(function () {
                return napaZone1.execute(napaLibPath + "/zone", 'get', ['zonex']);
            });
        });
    });
    describe("currentZone", function () {
        it('@node', function () {
            assert.strictEqual(napa.zone.current.id, 'node');
        });
        it('@napa', function () { return __awaiter(_this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, napaZone1.execute('./napa-zone/test', "getCurrentZone")];
                    case 1:
                        result = _a.sent();
                        assert.strictEqual(result.value.id, 'napa-zone1');
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('broadcast', function () {
        it('@node: -> node zone with JavaScript code', function () {
            return napa.zone.current.broadcast("var state = 0;");
        });
        it('@node: -> napa zone with JavaScript code', function () {
            return napaZone1.broadcast("var state = 0;");
        });
        it('@napa: -> napa zone with JavaScript code', function () {
            return napaZone1.execute('./napa-zone/test', "broadcast", ["napa-zone2", "var state = 0;"]);
        });
        it('@napa: -> napa zone with JavaScript code', function () {
            return napaZone1.execute('./napa-zone/test', "broadcast", ["napa-zone1", "var state = 0;"]);
        });
        it('@napa: -> node zone with JavaScript code', function () {
            return napaZone1.execute('./napa-zone/test', "broadcast", ["node", "var state = 0;"]);
        });
        it('@node: bad JavaScript code', function () {
            return shouldFail(function () {
                return napaZone1.broadcast("var state() = 0;");
            });
        });
        it('@napa: bad JavaScript code', function () {
            return shouldFail(function () {
                return napaZone1.execute('./napa-zone/test', "broadcast", ["napa-zone2", "var state() = 0;"]);
            });
        });
        it('@node: -> node zone throw runtime error', function () {
            return shouldFail(function () {
                return napa.zone.current.broadcast("throw new Error();");
            });
        });
        it('@node: -> napa zone throw runtime error', function () {
            return shouldFail(function () {
                return napaZone1.broadcast("throw new Error();");
            });
        });
        it('@napa: -> napa zone throw runtime error', function () {
            return shouldFail(function () {
                return napaZone1.execute('./napa-zone/test', "broadcast", ["napa-zone2", "throw new Error();"]);
            });
        });
        it('@napa: -> node zone throw runtime error', function () {
            return shouldFail(function () {
                return napaZone1.execute('./napa-zone/test', "broadcast", ["node", "throw new Error();"]);
            });
        });
        it('@node: -> node zone with anonymous function', function () {
            return napa.zone.current.broadcast(function (input) {
                console.log(input);
            }, ['hello world']);
        });
        it('@node: -> napa zone with anonymous function', function () {
            return napaZone1.broadcast(function (input) {
                console.log(input);
            }, ['hello world']);
        });
        it('@napa: -> napa zone with anonymous function', function () {
            return napaZone1.execute('./napa-zone/test', "broadcastTestFunction", ['napa-zone2']);
        });
        it('@napa: -> node zone with anonymous function', function () {
            return napaZone1.execute('./napa-zone/test', "broadcastTestFunction", ['node']);
        });
        // TODO #4: support transportable args in broadcast.
        it.skip('@node: -> node zone with transportable args', function () {
            return napa.zone.current.broadcast(function (allocator) {
                console.log(allocator);
            }, [napa.memory.crtAllocator]);
        });
        /// TODO #4: support transportable tags in broadcast.
        it.skip('@node: -> napa zone with transportable args', function () {
            return napaZone1.broadcast(function (allocator) {
                console.log(allocator);
            }, [napa.memory.crtAllocator]);
        });
        // Blocked by TODO #4.
        it.skip('@napa: -> napa zone with transportable args', function () {
            return napaZone1.execute('./napa-zone/test', "broadcastTransportable", ['napa-zone2']);
        });
        // Blocked by TODO #4.
        it.skip('@napa: -> node zone with transportable args', function () {
            return napaZone1.execute('./napa-zone/test', "broadcastTransportable", ['node']);
        });
        it('@node: -> node zone with anonymous function having closure (should fail)', function () {
            return shouldFail(function () {
                return napa.zone.current.broadcast(function () {
                    console.log(napaZone1.id);
                });
            });
        });
        it('@node: -> napa zone with anonymous function having closure (should fail)', function () {
            return shouldFail(function () {
                return napaZone1.broadcast(function () {
                    console.log(napaZone1.id);
                });
            });
        });
        it('@napa: -> napa zone with anonymous function having closure (should fail)', function () {
            return shouldFail(function () {
                return napaZone1.execute('./napa-zone/test', "broadcastClosure", ['napa-zone2']);
            });
        });
        it('@napa: -> node zone with anonymous function having closure (should fail)', function () {
            return shouldFail(function () {
                return napaZone1.execute('./napa-zone/test', "broadcastClosure", ['node']);
            });
        });
    });
    describe('execute', function () {
        var fooDef = 'function foo(input) { return input; }';
        var nestedFunctionDef = "\n            var ns1 = {\n                ns2: {\n                    foo: function (input) {\n                    return input;\n                    }\n                }\n            };\n        ";
        napaZone1.broadcast(fooDef);
        napaZone1.broadcast(nestedFunctionDef);
        napaZone2.broadcast(fooDef);
        napa.zone.node.broadcast(fooDef);
        napa.zone.node.broadcast(nestedFunctionDef);
        it('@node: -> node zone with global function name', function () {
            return napa.zone.current.execute("", "foo", ['hello world'])
                .then(function (result) {
                assert.equal(result.value, 'hello world');
            });
        });
        it('@node: -> napa zone with global function name', function () {
            return napaZone1.execute("", "foo", ['hello world'])
                .then(function (result) {
                assert.equal(result.value, 'hello world');
            });
        });
        it('@napa: -> napa zone with global function name', function () {
            return napaZone1.execute('./napa-zone/test', 'execute', ["napa-zone2", "", "foo", ['hello world']])
                .then(function (result) {
                assert.equal(result.value, 'hello world');
            });
        });
        it('@napa: -> node zone with global function name', function () {
            return napaZone1.execute('./napa-zone/test', 'execute', ["node", "", "foo", ['hello world']])
                .then(function (result) {
                assert.equal(result.value, 'hello world');
            });
        });
        it('@node: -> napa zone with global function name: function with namespaces', function () {
            return napaZone1.execute("", "ns1.ns2.foo", ['hello world'])
                .then(function (result) {
                assert.equal(result.value, 'hello world');
            });
        });
        it('@node: -> node zone with global function name not exists', function () {
            return shouldFail(function () {
                return napa.zone.current.execute("", "foo1", ['hello world']);
            });
        });
        it('@node: -> napa zone with global function name not exists', function () {
            return shouldFail(function () {
                return napaZone1.execute("", "foo1", ['hello world']);
            });
        });
        it('@napa: -> napa zone with global function name not exists', function () {
            return shouldFail(function () {
                return napaZone1.execute('./napa-zone/test', 'execute', ["napa-zone2", "", "foo1", []]);
            });
        });
        it('@napa: -> node zone with global function name not exists', function () {
            return shouldFail(function () {
                return napaZone1.execute('./napa-zone/test', 'execute', ["node", "", "foo1", []]);
            });
        });
        it('@node: -> node zone with module function name', function () {
            return napa.zone.current.execute('./napa-zone/test', "bar", ['hello world'])
                .then(function (result) {
                assert.equal(result.value, 'hello world');
            });
        });
        it('@node: -> napa zone with module function name', function () {
            return napaZone1.execute('./napa-zone/test', "bar", ['hello world'])
                .then(function (result) {
                assert.equal(result.value, 'hello world');
            });
        });
        it('@napa: -> napa zone with module function name', function () {
            return napaZone1.execute('./napa-zone/test', 'execute', ["napa-zone2", path.resolve(__dirname, './napa-zone/test'), "bar", ['hello world']])
                .then(function (result) {
                assert.equal(result.value, 'hello world');
            });
        });
        it('@napa: -> node zone with module function name', function () {
            return napaZone1.execute('./napa-zone/test', 'execute', ["node", path.resolve(__dirname, './napa-zone/test'), "bar", ['hello world']])
                .then(function (result) {
                assert.equal(result.value, 'hello world');
            });
        });
        it('@node: -> napa zone with module function name: function with namespaces', function () {
            return napaZone1.execute('./napa-zone/test', "ns1.ns2.foo", ['hello world'])
                .then(function (result) {
                assert.equal(result.value, 'hello world');
            });
        });
        it('@node: -> napa zone with module function name: module is a function', function () {
            return napaZone1.execute(path.resolve(__dirname, "./napa-zone/function-as-module"), "", ['hello world'])
                .then(function (result) {
                assert.equal(result.value, 'hello world');
            });
        });
        it('@node: -> node zone with module not exists', function () {
            return shouldFail(function () {
                return napa.zone.current.execute("abc", "foo1", ['hello world']);
            });
        });
        it('@node: -> napa zone with module not exists', function () {
            return shouldFail(function () {
                return napaZone1.execute("abc", "foo1", ['hello world']);
            });
        });
        it('@napa: -> napa zone with module not exists', function () {
            return shouldFail(function () {
                return napaZone1.execute('./napa-zone/test', 'execute', ["napa-zone2", "abc", ".foo", []]);
            });
        });
        it('@napa: -> node zone with module not exists', function () {
            return shouldFail(function () {
                return napaZone1.execute('./napa-zone/test', 'execute', ["node", "abc", "foo.", []]);
            });
        });
        it('@node: -> node zone with module function not exists', function () {
            return shouldFail(function () {
                return napa.zone.current.execute('./napa-zone/test', "foo1", ['hello world']);
            });
        });
        it('@node: -> napa zone with module function not exists', function () {
            return shouldFail(function () {
                return napaZone1.execute('./napa-zone/test', "foo1", ['hello world']);
            });
        });
        it('@napa: -> napa zone with module function not exists', function () {
            return shouldFail(function () {
                return napaZone1.execute('./napa-zone/test', 'execute', ["napa-zone1", './napa-zone/test', "foo1", []]);
            });
        });
        it('@napa: -> node zone with module function not exists', function () {
            return shouldFail(function () {
                return napaZone1.execute('./napa-zone/test', 'execute', ["node", './napa-zone/test', "foo1", []]);
            });
        });
        it('@node: -> node zone with anonymous function', function () {
            return napa.zone.current.execute(function (input) {
                return input;
            }, ['hello world'])
                .then(function (result) {
                assert.equal(result.value, 'hello world');
            });
        });
        it('@node: -> napa zone with anonymous function', function () {
            return napaZone1.execute(function (input) {
                return input;
            }, ['hello world'])
                .then(function (result) {
                assert.equal(result.value, 'hello world');
            });
        });
        it('@napa: -> napa zone with anonymous function', function () {
            return napaZone1.execute('./napa-zone/test', 'executeTestFunction', ["napa-zone2"])
                .then(function (result) {
                assert.equal(result.value, 'hello world');
            });
        });
        it('@napa: -> node zone with anonymous function', function () {
            return napaZone1.execute('./napa-zone/test', 'executeTestFunction', ["node"])
                .then(function (result) {
                assert.equal(result.value, 'hello world');
            });
        });
        it('@node: -> node zone with anonymous function having closure (should success)', function () {
            return napa.zone.current.execute(function () { return napaZone1; });
        });
        it('@node: -> napa zone with anonymous function having closure (should fail)', function () {
            return shouldFail(function () {
                return napaZone1.execute(function () { return napaZone1; });
            });
        });
        it('@napa: -> napa zone with anonymous function having closure (should fail)', function () {
            return shouldFail(function () {
                return napaZone1.execute('./napa-zone/test', 'executeTestFunctionWithClosure', ["napa-zone2"]);
            });
        });
        it('@napa: -> node zone with anonymous function having closure (should fail)', function () {
            return shouldFail(function () {
                return napaZone1.execute('./napa-zone/test', 'executeTestFunctionWithClosure', ["node"]);
            });
        });
        it('@node: -> node zone with transportable args', function () {
            return napa.zone.current.execute(function (allocator) {
                var assert = require("assert");
                assert.deepEqual(allocator.handle, global.napa.memory.crtAllocator.handle);
            }, [napa.memory.crtAllocator]);
        });
        it('@node: -> napa zone with transportable args', function () {
            return napaZone1.execute(function (allocator) {
                var assert = require("assert");
                assert.deepEqual(allocator.handle, global.napa.memory.crtAllocator.handle);
            }, [napa.memory.crtAllocator]);
        });
        it('@napa: -> napa zone with transportable args', function () {
            return napaZone1.execute('./napa-zone/test', "executeWithTransportableArgs", ['napa-zone2']);
        });
        it('@napa: -> node zone with transportable args', function () {
            return napaZone1.execute('./napa-zone/test', "executeWithTransportableArgs", ['node']);
        });
        it('@node: -> node zone with transportable returns', function () {
            return napa.zone.current.execute(function (allocator) {
                return allocator;
            }, [napa.memory.crtAllocator])
                .then(function (result) {
                assert.deepEqual(result.value.handle, napa.memory.crtAllocator.handle);
            });
        });
        it('@node: -> napa zone with transportable returns', function () {
            return napaZone1.execute(function (allocator) {
                return allocator;
            }, [napa.memory.crtAllocator])
                .then(function (result) {
                assert.deepEqual(result.value.handle, napa.memory.crtAllocator.handle);
            });
        });
        it('@napa: -> napa zone with transportable returns', function () {
            return napaZone1.execute('./napa-zone/test', "executeWithTransportableReturns", ['napa-zone2'])
                .then(function (result) {
                assert.deepEqual(result.value.handle, napa.memory.crtAllocator.handle);
            });
        });
        it('@napa: -> node zone with transportable returns', function () {
            return napaZone1.execute('./napa-zone/test', "executeWithTransportableReturns", ['node'])
                .then(function (result) {
                assert.deepEqual(result.value.handle, napa.memory.crtAllocator.handle);
            });
        });
        it.skip('@node: -> napa zone with timeout and succeed', function () {
            return napaZone1.execute('./napa-zone/test', 'waitMS', [1], { timeout: 100 });
        });
        it.skip('@napa: -> napa zone with timeout and succeed', function () {
            return napaZone1.execute('./napa-zone/test', 'executeTestFunctionWithTimeout', ["napa-zone2", 1], { timeout: 100 });
        });
        it.skip('@node: -> napa zone with timed out in JavaScript', function () {
            return shouldFail(function () {
                return napaZone1.execute('./napa-zone/test', 'waitMS', [100], { timeout: 1 });
            });
        });
        it.skip('@napa: -> napa zone with timed out in JavaScript', function () {
            return shouldFail(function () {
                return napaZone1.execute('./napa-zone/test', 'executeTestFunctionWithTimeout', ["napa-zone2", 100], { timeout: 1 });
            });
        });
        it.skip('@node: -> napa zone with timed out in add-on', function () {
        });
        it.skip('@napa: -> napa zone with timed out in add-on', function () {
        });
        it.skip('@node: -> napa zone with timed out in multiple hops', function () {
        });
        it.skip('@napa: -> napa zone with timed out in multiple hops', function () {
        });
    });
});
