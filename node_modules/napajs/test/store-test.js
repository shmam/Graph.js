"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var napa = require("../lib/index");
var assert = require("assert");
describe('napajs/store', function () {
    var _this = this;
    var napaZone = napa.zone.create('zone6');
    var store1 = napa.store.create('store1');
    it('@node: store.create - succeed', function () {
        assert(store1 != null);
        assert.equal(store1.id, 'store1');
        assert.equal(store1.size, 0);
    });
    it('@node: store.create - already exists', function () {
        var succeed = false;
        try {
            var store = napa.store.create('store1');
            succeed = true;
        }
        catch (error) {
        }
        assert(!succeed);
    });
    var store2CreationComplete;
    it('@napa: store.getOrCreate', function () {
        store2CreationComplete = napaZone.execute('./napa-zone/test', "getOrCreateStoreTest");
    });
    it('@node: store.get', function () { return __awaiter(_this, void 0, void 0, function () {
        var store, store2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    store = napa.store.get('store1');
                    assert.equal(store.id, store1.id);
                    // Store created from napa zone.
                    return [4 /*yield*/, store2CreationComplete];
                case 1:
                    // Store created from napa zone.
                    _a.sent();
                    store2 = napa.store.get('store2');
                    assert.equal(store2.id, 'store2');
                    return [2 /*return*/];
            }
        });
    }); });
    it('@napa: store.get', function () {
        napaZone.execute('./napa-zone/test', "getStoreTest");
    });
    it('simple types: set in node, get in node', function () {
        store1.set('a', 1);
        assert.equal(store1.get('a'), 1);
    });
    it('simple types: set in node, get in napa', function () {
        store1.set('b', 'hi');
        napaZone.execute('./napa-zone/test', "storeVerifyGet", ['store1', 'b', 'hi']);
    });
    it('simple types: set in napa, get in napa', function () {
        napaZone.execute('./napa-zone/test', "storeSet", ['store1', 'c', 1]);
        napaZone.execute('./napa-zone/test', "storeVerifyGet", ['store1', 'c', 1]);
    });
    it('simple types: set in napa, get in node', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, napaZone.execute('./napa-zone/test', "storeSet", ['store1', 'd', { a: 1, b: 1 }])];
                case 1:
                    _a.sent();
                    assert.deepEqual(store1.get('d'), {
                        a: 1,
                        b: 1
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it('transportable types: set in node, get in node', function () {
        store1.set('a', napa.memory.crtAllocator);
        assert.deepEqual(store1.get('a'), napa.memory.crtAllocator);
    });
    it('transportable types: set in node, get in napa', function () {
        store1.set('b', napa.memory.defaultAllocator);
        napaZone.execute('./napa-zone/test', "storeVerifyGet", ['store1', 'b', napa.memory.defaultAllocator]);
    });
    it('transportable types: set in napa, get in napa', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: 
                // We have to compare handle in this case, since napa.memory.defaultAllocator retrieved from napa zone will have 2+ refCount.
                return [4 /*yield*/, napaZone.execute('./napa-zone/test', "storeSet", ['store1', 'e', napa.memory.defaultAllocator])];
                case 1:
                    // We have to compare handle in this case, since napa.memory.defaultAllocator retrieved from napa zone will have 2+ refCount.
                    _a.sent();
                    napaZone.execute('./napa-zone/test', "storeGetCompareHandle", ['store1', 'e', napa.memory.defaultAllocator.handle]);
                    return [2 /*return*/];
            }
        });
    }); });
    it('transportable types: set in napa, get in node', function () { return __awaiter(_this, void 0, void 0, function () {
        var debugAllocator;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    debugAllocator = napa.memory.debugAllocator(napa.memory.defaultAllocator);
                    return [4 /*yield*/, napaZone.execute('./napa-zone/test', "storeSet", ['store1', 'f', debugAllocator])];
                case 1:
                    _a.sent();
                    assert.deepEqual(store1.get('f'), debugAllocator);
                    return [2 /*return*/];
            }
        });
    }); });
    it('function type: set in node, get in node', function () {
        store1.set('g', function () { return 0; });
        assert.equal(store1.get('g').toString(), (function () { return 0; }).toString());
    });
    it('function type: set in node, get in napa', function () {
        store1.set('h', function () { return 0; });
        napaZone.execute('./napa-zone/test', "storeVerifyGet", ['store1', 'h', function () { return 0; }]);
    });
    it('function type: set in napa, get in napa', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, napaZone.execute('./napa-zone/test', "storeSet", ['store1', 'i', function () { return 0; }])];
                case 1:
                    _a.sent();
                    napaZone.execute('./napa-zone/test', "storeVerifyGet", ['store1', 'i', function () { return 0; }]);
                    return [2 /*return*/];
            }
        });
    }); });
    it('function type: set in napa, get in node', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, napaZone.execute('./napa-zone/test', "storeSet", ['store1', 'j', function () { return 0; }])];
                case 1:
                    _a.sent();
                    assert.deepEqual(store1.get('j').toString(), (function () { return 0; }).toString());
                    return [2 /*return*/];
            }
        });
    }); });
    it('delete in node, check in node', function () {
        assert(store1.has('a'));
        store1.delete('a');
        assert(!store1.has('a'));
        assert(store1.get('a') === undefined);
        store1.delete('not-exist');
    });
    it('delete in node, check in napa', function () {
        assert(store1.has('b'));
        store1.delete('b');
        napaZone.execute('./napa-zone/test', "storeVerifyNotExist", ['store1', 'b']);
    });
    it('delete in napa, check in napa', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, napaZone.execute('./napa-zone/test', "storeDelete", ['store1', 'c'])];
                case 1:
                    _a.sent();
                    napaZone.execute('./napa-zone/test', "storeVerifyNotExist", ['store1', 'c']);
                    return [2 /*return*/];
            }
        });
    }); });
    it('delete in napa, check in node', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, napaZone.execute('./napa-zone/test', "storeDelete", ['store1', 'd'])];
                case 1:
                    _a.sent();
                    assert(!store1.has('d'));
                    assert(store1.get('d') === undefined);
                    return [2 /*return*/];
            }
        });
    }); });
    it('size', function () {
        // set 'a', 'b', 'c', 'd', 'a', 'b', 'e', 'f', 'g', 'h', 'i', 'j'.
        // delete 'a', 'b', 'c', 'd'
        assert.equal(store1.size, 6);
    });
});
