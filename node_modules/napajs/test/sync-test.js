"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var napa = require("../lib/index");
var assert = require("assert");
// spin-wait for the specific time, in milliseconds.
function spinWait(time) {
    var now = Date.now();
    while (Date.now() - now < time) { }
}
describe('napajs/sync', function () {
    it('@node: sync.Lock - create a lock', function () {
        var succeed = false;
        try {
            var lock = napa.sync.createLock();
            succeed = true;
        }
        catch (error) {
        }
        assert(succeed);
    });
    it('@node: sync.Lock - parameters passing', function () {
        var succeed = false;
        try {
            var lock = napa.sync.createLock();
            lock.guardSync(function (a, b, c) {
                assert.strictEqual(a, 123);
                assert.strictEqual(b, '456');
                assert.strictEqual(c, undefined);
            }, [123, '456']);
            succeed = true;
        }
        catch (error) {
        }
        assert(succeed);
    });
    it('@node: sync.Lock - guard single thread sync execution', function () {
        var succeed = false;
        var index = 0;
        try {
            var lock = napa.sync.createLock();
            lock.guardSync(function () {
                spinWait(100);
                assert.equal(index, 0);
                index++;
            });
            lock.guardSync(function () {
                spinWait(100);
                assert.equal(index, 1);
                index++;
            });
            assert.equal(index, 2);
            succeed = true;
        }
        catch (error) {
        }
        assert(succeed);
    });
    it('@napa: sync.Lock - multi thread sync execution (not using lock)', function () {
        var napaZone = napa.zone.create('zone-for-sync-test-1', { workers: 2 });
        napaZone.broadcast(spinWait.toString());
        // If not using lock, the store.set() in second execute() function should start before the first complete.
        var succeed = false;
        try {
            var lock = napa.sync.createLock();
            // We use napa.store to verify the result
            var store_1 = napa.store.create('store-for-sync-test-1');
            store_1.set('before-wait', 0);
            store_1.set('after-wait', 0);
            var exe1 = napaZone.execute(function () {
                var napa = require('../lib/index');
                var store = napa.store.get('store-for-sync-test-1');
                store.set('before-wait', 1);
                global.spinWait(500);
                store.set('after-wait', 1);
            });
            var exe2 = napaZone.execute(function () {
                var assert = require('assert');
                var napa = require('../lib/index');
                var store = napa.store.get('store-for-sync-test-1');
                global.spinWait(100);
                assert.equal(store.get('before-wait'), 1);
                assert.equal(store.get('after-wait'), 0);
            });
            return Promise.all([exe1, exe2]).then(function () {
                assert.equal(store_1.get('before-wait'), 1);
                assert.equal(store_1.get('after-wait'), 1);
            });
        }
        catch (error) {
        }
    }).timeout(5000);
    it('@napa: sync.Lock - multi thread sync execution (using lock)', function () {
        var napaZone = napa.zone.create('zone-for-sync-test-2', { workers: 2 });
        napaZone.broadcast(spinWait.toString());
        // If guard by lock, the store.set() in second execute() function should start after the first complete.
        var succeed = false;
        try {
            var lock = napa.sync.createLock();
            // We use napa.store to verify the result
            var store_2 = napa.store.create('store-for-sync-test-2');
            store_2.set('before-wait', 0);
            store_2.set('after-wait', 0);
            var exe1 = napaZone.execute(function (lock) {
                var napa = require('../lib/index');
                var store = napa.store.get('store-for-sync-test-2');
                lock.guardSync(function () {
                    store.set('before-wait', 1);
                    global.spinWait(500);
                    store.set('after-wait', 1);
                });
            }, [lock]);
            var exe2 = napaZone.execute(function (lock) {
                var assert = require('assert');
                var napa = require('../lib/index');
                var store = napa.store.get('store-for-sync-test-2');
                global.spinWait(100);
                lock.guardSync(function () {
                    assert.equal(store.get('before-wait'), 1);
                    assert.equal(store.get('after-wait'), 1);
                });
            }, [lock]);
            return Promise.all([exe1, exe2]).then(function () {
                assert.equal(store_2.get('before-wait'), 1);
                assert.equal(store_2.get('after-wait'), 1);
            });
        }
        catch (error) {
        }
    }).timeout(5000);
});
