"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require("assert");
var mdTable = require("markdown-table");
var bench_utils_1 = require("./bench-utils");
function makeCRCTable() {
    var c;
    var crcTable = [];
    for (var n = 0; n < 256; n++) {
        c = n;
        for (var k = 0; k < 8; k++) {
            c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));
        }
        crcTable[n] = c;
    }
    return crcTable;
}
var crcTable = makeCRCTable();
function crc32(str) {
    var crc = 0 ^ (-1);
    for (var i = 0; i < str.length; i++) {
        crc = (crc >>> 8) ^ crcTable[(crc ^ str.charCodeAt(i)) & 0xFF];
    }
    return (crc ^ (-1)) >>> 0;
}
;
function testCrc() {
    var REPEAT = 1000000;
    var result = 0;
    var key = Array(1024).join('x');
    for (var i = 0; i < REPEAT; ++i) {
        var hash = crc32(key);
        result = result ^ hash;
    }
    return result;
}
function bench(zone) {
    return __awaiter(this, void 0, void 0, function () {
        var crcResult, start, nodeTime, executeTime, scalabilityTest;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    console.log("Benchmarking execute scalability...");
                    // Prepare a empty function.
                    return [4 /*yield*/, zone.broadcast(makeCRCTable.toString())];
                case 1:
                    // Prepare a empty function.
                    _a.sent();
                    return [4 /*yield*/, zone.broadcast("var crcTable = makeCRCTable();")];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, zone.broadcast(crc32.toString())];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, zone.broadcast(testCrc.toString())];
                case 4:
                    _a.sent();
                    crcResult = testCrc();
                    return [4 /*yield*/, zone.broadcast("testCrc()")];
                case 5:
                    _a.sent();
                    start = process.hrtime();
                    assert(testCrc() === crcResult);
                    nodeTime = bench_utils_1.formatTimeDiff(process.hrtime(start));
                    executeTime = {};
                    scalabilityTest = function (workers) {
                        var finished = 0;
                        var start = process.hrtime();
                        return new Promise(function (resolve, reject) {
                            for (var i = 0; i < workers; ++i) {
                                zone.execute("", "testCrc", []).then(function (result) {
                                    assert(crcResult === result.value);
                                    ++finished;
                                    if (finished === workers) {
                                        executeTime[workers] = bench_utils_1.formatTimeDiff(process.hrtime(start));
                                        resolve();
                                    }
                                });
                            }
                        });
                    };
                    // Execute from 1 worker to 8 workers.
                    return [4 /*yield*/, scalabilityTest(1)];
                case 6:
                    // Execute from 1 worker to 8 workers.
                    _a.sent();
                    return [4 /*yield*/, scalabilityTest(2)];
                case 7:
                    _a.sent();
                    return [4 /*yield*/, scalabilityTest(4)];
                case 8:
                    _a.sent();
                    return [4 /*yield*/, scalabilityTest(8)];
                case 9:
                    _a.sent();
                    console.log("## Execute scalability\n");
                    console.log(mdTable([
                        ["node", "napa - 1 worker", "napa - 2 workers", "napa - 4 workers", "napa - 8 workers"],
                        [nodeTime, executeTime[1], executeTime[2], executeTime[4], executeTime[8]]
                    ]));
                    console.log('');
                    return [2 /*return*/];
            }
        });
    });
}
exports.bench = bench;
