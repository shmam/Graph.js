"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var napa = require("../lib/index");
var assert = require("assert");
var mdTable = require("markdown-table");
var bench_utils_1 = require("./bench-utils");
function bench() {
    console.log("Benchmarking store overhead...");
    var settings = [
        // Number
        ["1 level - 1 integers", 1, 1, "number", 0],
        ["1 level - 10 integers", 10, 1, "number", 0],
        ["1 level - 100 integers", 100, 1, "number", 0],
        ["10 level - 2 integers", 2, 10, "number", 0],
        ["2 level - 10 integers", 10, 2, "number", 0],
        ["3 level - 5 integers", 5, 3, "number", 0],
        // String
        ["1 level - 10 strings - length 10", 10, 1, "string", 10],
        ["1 level - 100 strings - length 10", 100, 1, "string", 10],
        ["2 level - 10 strings - length 10", 10, 2, "string", 10],
        ["3 level - 5 strings - length 10", 5, 3, "string", 10],
        ["1 level - 10 strings - length 100", 10, 1, "string", 100],
        ["1 level - 100 strings - length 100", 100, 1, "string", 100],
        ["2 level - 10 strings - length 100", 10, 2, "string", 100],
        ["3 level - 5 integers", 5, 3, "string", 100],
        // Boolean
        ["1 level - 10 booleans", 10, 1, "boolean", 0],
        ["1 level - 100 booleans", 100, 1, "boolean", 0],
        ["2 level - 10 booleans", 10, 2, "boolean", 0],
        ["3 level - 5 booleans", 5, 3, "boolean", 0],
    ];
    var store = napa.store.create('store');
    var table = [];
    table.push(["payload type", "size", "transport.marshall (ms)", "store.save (ms)", "transport.unmarshall (ms)", "store.get (ms)"]);
    for (var _i = 0, settings_1 = settings; _i < settings_1.length; _i++) {
        var s = settings_1[_i];
        var REPEAT = 1000;
        var object = bench_utils_1.generateObject(s[1], s[2], s[3], s[4]);
        var payload = JSON.stringify(object);
        var size = payload.length;
        // transport.marshall
        var start = process.hrtime();
        for (var i = 0; i < REPEAT; ++i) {
            napa.transport.marshall(object, null);
        }
        var marshallTime = bench_utils_1.formatTimeDiff(process.hrtime(start));
        // store.set
        start = process.hrtime();
        for (var i = 0; i < REPEAT; ++i) {
            store.set('key', object);
        }
        var storeSetTime = bench_utils_1.formatTimeDiff(process.hrtime(start));
        assert.deepEqual(object, store.get('key'));
        // transport.unmarshall
        start = process.hrtime();
        for (var i = 0; i < REPEAT; ++i) {
            napa.transport.unmarshall(payload, null);
        }
        var unmarshallTime = bench_utils_1.formatTimeDiff(process.hrtime(start));
        // store.get
        start = process.hrtime();
        for (var i = 0; i < REPEAT; ++i) {
            store.get('key');
        }
        var storeGetTime = bench_utils_1.formatTimeDiff(process.hrtime(start));
        table.push([s[0], size, marshallTime, storeSetTime, unmarshallTime, storeGetTime]);
    }
    console.log("## Store access overhead\n");
    console.log(mdTable(table));
    console.log('');
}
exports.bench = bench;
