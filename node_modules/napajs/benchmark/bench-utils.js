"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
/// <summary> Utility function to generate object for testing. </summary>
function generateString(length) {
    return Array(length).join('x');
}
exports.generateString = generateString;
function generateObject(keys, depth, valueType, valueLength) {
    if (valueType === void 0) { valueType = "string"; }
    if (valueLength === void 0) { valueLength = 7; }
    var object = {};
    for (var i = 0; i < keys; ++i) {
        var key = "key" + i;
        var value = null;
        if (depth > 1) {
            value = generateObject(keys, depth - 1, valueType, valueLength);
        }
        else if (valueType === 'string') {
            // We try to make each string different.
            value = generateString(valueLength - 1) + (depth * keys + i);
        }
        else if (valueType === 'number') {
            value = i;
        }
        else if (valueType === 'boolean') {
            value = i % 2 == 0;
        }
        object[key] = value;
    }
    return object;
}
exports.generateObject = generateObject;
function timeDiffInMs(diff) {
    return (diff[0] * 1e9 + diff[1]) / 1e6;
}
exports.timeDiffInMs = timeDiffInMs;
function formatTimeDiff(diff, printUnit) {
    if (printUnit === void 0) { printUnit = false; }
    if (Array.isArray(diff)) {
        diff = timeDiffInMs(diff);
    }
    var message = diff.toFixed(2);
    if (printUnit) {
        message += "ms";
    }
    return message;
}
exports.formatTimeDiff = formatTimeDiff;
function formatRatio(dividend, divider) {
    return "(" + (dividend / divider).toFixed(2) + "x)";
}
exports.formatRatio = formatRatio;
