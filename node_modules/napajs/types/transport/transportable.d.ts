import { Shareable } from '../memory/shareable';
import { Handle } from '../memory/handle';
export interface TransportContext {
    saveShared(object: Shareable): void;
    loadShared(handle: Handle): Shareable;
    readonly sharedCount: number;
}
export interface Transportable {
    cid(): string;
    marshall(context: TransportContext): object;
    unmarshall(payload: object, context: TransportContext): void;
}
export declare abstract class TransportableObject implements Transportable {
    cid(): string;
    abstract save(payload: object, context: TransportContext): void;
    abstract load(payload: object, context: TransportContext): void;
    marshall(context: TransportContext): object;
    unmarshall(payload: object, context: TransportContext): void;
}
export declare class AutoTransportable extends TransportableObject {
    save(payload: object, context: TransportContext): void;
    load(payload: object, context: TransportContext): void;
}
export declare function isTransportable(jsValue: any): boolean;
export declare function cid<T extends TransportableObject>(guid?: string): (constructor: new (...args: any[]) => any) => void;
