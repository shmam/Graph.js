"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var functionTransporter = require("./function-transporter");
var builtinObjectTransporter = require("./builtin-object-transporter");
/// <summary> Per-isolate cid => constructor registry. </summary>
var _registry = new Map();
var _builtInTypeWhitelist = new Set();
[
    'ArrayBuffer',
    'Float32Array',
    'Float64Array',
    'Int16Array',
    'Int32Array',
    'Int8Array',
    'SharedArrayBuffer',
    'Uint16Array',
    'Uint32Array',
    'Uint8Array'
].forEach(function (type) { _builtInTypeWhitelist.add(type); });
/// <summary> Register a TransportableObject sub-class with a Constructor ID (cid). </summary>
function register(subClass) {
    // Check cid from constructor first, which is for TransportableObject. 
    // Thus we don't need to construct the object to get cid according to Transportable interface. 
    var cid = subClass['_cid'];
    if (cid == null) {
        cid = new subClass().cid();
    }
    if (cid == null) {
        throw new Error("Class \"" + subClass.name + "\" doesn't implement cid(), did you forget put @cid decorator before class declaration?");
    }
    if (_registry.has(cid)) {
        throw new Error("Constructor ID (cid) \"" + cid + "\" is already registered.");
    }
    _registry.set(cid, subClass);
}
exports.register = register;
/// <summary> Marshall transform a JS value to a plain JS value that will be stringified. </summary> 
function marshallTransform(jsValue, context) {
    if (jsValue != null && typeof jsValue === 'object' && !Array.isArray(jsValue)) {
        var constructorName = Object.getPrototypeOf(jsValue).constructor.name;
        if (constructorName !== 'Object') {
            if (typeof jsValue['cid'] === 'function') {
                return (jsValue).marshall(context);
            }
            else if (_builtInTypeWhitelist.has(constructorName)) {
                var serializedData = builtinObjectTransporter.serializeValue(jsValue);
                if (serializedData) {
                    return { _serialized: serializedData };
                }
                else {
                    throw new Error("Failed to serialize object with type of \"" + constructorName + "\".");
                }
            }
            else {
                throw new Error("Object type \"" + constructorName + "\" is not transportable.");
            }
        }
    }
    return jsValue;
}
exports.marshallTransform = marshallTransform;
/// <summary> Unmarshall transform a plain JS value to a transportable class instance. </summary>
/// <param name="payload"> Plain Javascript value. </param> 
/// <param name="context"> Transport context. </param>
/// <returns> Transported value. </returns>
function unmarshallTransform(payload, context) {
    if (payload != null && payload._cid !== undefined) {
        var cid = payload._cid;
        if (cid === 'function') {
            return functionTransporter.load(payload.hash);
        }
        var subClass = _registry.get(cid);
        if (subClass == null) {
            throw new Error("Unrecognized Constructor ID (cid) \"" + cid + "\". Please ensure @cid is applied on the class or transport.register is called on the class.");
        }
        var object = new subClass();
        object.unmarshall(payload, context);
        return object;
    }
    else if (payload.hasOwnProperty('_serialized')) {
        return builtinObjectTransporter.deserializeValue(payload['_serialized']);
    }
    return payload;
}
/// <summary> Unmarshall from JSON string to a JavaScript value, which could contain complex/native objects. </summary>
/// <param name="json"> JSON string. </summary>
/// <param name="context"> Transport context to save shared pointers. </param>
/// <returns> Parsed JavaScript value, which could be built-in JavaScript types or deserialized Transportable objects. </returns>
function unmarshall(json, context) {
    if (json === "undefined") {
        return undefined;
    }
    return JSON.parse(json, function (key, value) {
        return unmarshallTransform(value, context);
    });
}
exports.unmarshall = unmarshall;
/// <summary> Marshall a JavaScript value to JSON. </summary>
/// <param name="jsValue"> JavaScript value to stringify, which maybe built-in JavaScript types or transportable objects. </param>
/// <param name="context"> Transport context to save shared pointers. </param>
/// <returns> JSON string. </returns>
function marshall(jsValue, context) {
    // Function is transportable only as root object. 
    // This is to avoid unexpected marshalling on member functions.
    if (typeof jsValue === 'function') {
        return "{\"_cid\": \"function\", \"hash\": \"" + functionTransporter.save(jsValue) + "\"}";
    }
    return JSON.stringify(jsValue, function (key, value) {
        return marshallTransform(value, context);
    });
}
exports.marshall = marshall;
