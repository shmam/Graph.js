"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var binding = require('./binding');
exports.log = createLogObject();
var LogLevel;
(function (LogLevel) {
    LogLevel[LogLevel["Error"] = 0] = "Error";
    LogLevel[LogLevel["Warning"] = 1] = "Warning";
    LogLevel[LogLevel["Info"] = 2] = "Info";
    LogLevel[LogLevel["Debug"] = 3] = "Debug";
})(LogLevel || (LogLevel = {}));
function dispatchLog(level, arg1, arg2, arg3) {
    if (arg3 != undefined) {
        binding.log(level, arg1, arg2, arg3);
    }
    else if (arg2 != undefined) {
        binding.log(level, arg1, undefined, arg2);
    }
    else {
        binding.log(level, undefined, undefined, arg1);
    }
}
function createLogObject() {
    // napa.log()
    var logObj = function (arg1, arg2, arg3) {
        dispatchLog(LogLevel.Info, arg1, arg2, arg3);
    };
    // napa.log.err()
    logObj.err = function (arg1, arg2, arg3) {
        dispatchLog(LogLevel.Error, arg1, arg2, arg3);
    };
    // napa.log.warn()
    logObj.warn = function (arg1, arg2, arg3) {
        dispatchLog(LogLevel.Warning, arg1, arg2, arg3);
    };
    // napa.log.info()
    logObj.info = function (arg1, arg2, arg3) {
        dispatchLog(LogLevel.Info, arg1, arg2, arg3);
    };
    // napa.log.debug()
    logObj.debug = function (arg1, arg2, arg3) {
        dispatchLog(LogLevel.Debug, arg1, arg2, arg3);
    };
    return logObj;
}
